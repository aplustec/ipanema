<?php

/**
 * @see Zend_Controller_Action_Helper_Abstract
 */
require_once 'Zend/Controller/Action/Helper/Abstract.php';

/**
 * This is a Helper to generate name for files
 * 
 * @category Helpers
 * @package App/Plugins
 * @subpackage Helpers
 * @author Lucas Mendes de Freitas (devsdmf)
 * @since 2012
 * @license http://www.devsdmf.net/license/general.txt
 * @copyright Aplus Tecnologia e Engenharia LTDA | devSDMF Software Development (c)
 *
 */

class Helper_GenerateFileName extends Zend_Controller_Action_Helper_Abstract
{
	/**
	 * The default size to hash generated
	 * 
	 * @var integer
	 */
	const DEFAULT_SIZE = 15;
	/**
	 * The default flag to hash
	 * 
	 * @var boolean
	 */
	const DEFAULT_FLAG = false;
	/**
	 * The default custom string location
	 * 
	 * @var string
	 */
	const DEFAULT_CUSTOM_LOCATION = 'end';
	/**
	 * The default factor to glue pieces of generated filename
	 * 
	 * @var string
	 */
	const DEFAULT_GLUE = '_';
	/**
	 * The default algo value for hash function
	 * 
	 * @var string
	 */
	const DEFAULT_HASH_ALGO = 'whirlpool';
	/**
	 * The size of generated hash
	 * 
	 * @var integer
	 */
	protected $_size = self::DEFAULT_SIZE;
	/**
	 * The flag for use hash or not 
	 * 
	 * @var boolean
	 */
	protected $_flag = self::DEFAULT_FLAG;
	/**
	 * The glue to mount a filename 
	 * 
	 * @var string
	 */
	protected $_glue = self::DEFAULT_GLUE;
	/**
	 * The algo hash
	 * 
	 * @var string
	 */
	protected $_hashAlgo = self::DEFAULT_HASH_ALGO;
	/**
	 * The extension of generated filename
	 * 
	 * @var string
	 */
	protected $_ext = null;
	/**
	 * The date of day 
	 * 
	 * @var string
	 */
	protected $_date = null;
	/**
	 * The hour 
	 * 
	 * @var string
	 */
	protected $_hour = null;
	/**
	 * The custom string to increment the filename
	 * 
	 * @var string
	 */
	protected $_custom = null;
	/**
	 * The location of custom string
	 * @var string
	 */
	protected $_customLocation = self::DEFAULT_CUSTOM_LOCATION;
	/**
	 * The filename generated by object
	 * 
	 * @var string
	 */
	protected $_filename = null;
	/**
	 * Constructor
	 */
	function __construct(){}
	/**
	 * Method to set a custom size of hash
	 * 
	 * @param integer $size
	 */
	function setSize( $size )
	{
		if(is_int($size))
			$this->_size = $size;
	}
	/**
	 * Method to set a flag if is hash or no
	 * 
	 * @param boolean $bool
	 */
	function setFlag( $bool )
	{
		if(is_bool($bool))
			$this->_flag = $bool;
	}
	/**
	 * Method to set a custom glue piece
	 * 
	 * @param string $glue
	 */
	function setGlue( $glue )
	{
		if(is_string($glue))
			$this->_glue = $glue;
	}
	/**
	 * Method to set a custom hash algo
	 * 
	 * @param string $algo
	 */
	function setHashAlgo( $algo )
	{
		if(is_string($algo))
			$this->_hashAlgo = $algo;
	}
	/**
	 * Method to set the extension of file
	 * 
	 * @param string $ext
	 */
	function setExtension( $ext )
	{
		if(is_string($ext))
			$this->_ext = $ext;
	}
	/**
	 * Method to set the custom string 
	 * 
	 * @param string $custom
	 * @param string $location Optional; A custom location of custom string
	 */
	function setCustom( $custom , $location = self::DEFAULT_CUSTOM_LOCATION)
	{
		if(is_string($custom) || is_int($custom))
			$this->_custom = $custom;
		
		if(is_string($location))
			$this->_customLocation = $location;
	}
	/**
	 * Method to set the a custom location of custom string
	 * 
	 * @param string $location
	 */
	function setCustomLocation( $location = self::DEFAULT_CUSTOM_LOCATION )
	{
		if(is_string($location))
			$this->_customLocation = $location;
	}
	/**
	 * Method to get the current size
	 * 
	 * @return integer
	 */
	function getSize()
	{
		return $this->_size;
	}
	/**
	 * Method to get the current value of flag control var
	 * 
	 * @return boolean
	 */
	function getFlag()
	{
		return $this->_flag;
	}
	/**
	 * Method to get the current glue piece
	 * 
	 * @return string
	 */
	function getGlue()
	{
		return $this->_glue;
	}
	/**
	 * Method to get the current algo used in hash function
	 * 
	 * @return string
	 */
	function getHashAlgo()
	{
		return $this->_hashAlgo;
	}
	/**
	 * Method to get current extension setted in object
	 * 
	 * @return string
	 */
	function getExtension()
	{
		return $this->_ext;
	}
	/**
	 * Method to get the current custom string setted in object
	 * 
	 * @return string
	 */
	function getCustom()
	{
		return $this->_custom;
	}
	/**
	 * Method to get the current custom location
	 * 
	 * @return string
	 */
	function getCustomLocation()
	{
		return $this->_customLocation;
	}
	/**
	 * Method to get the filename generated by object
	 * 
	 * @return string
	 */
	function getFileName()
	{
		return $this->_filename;
	}
	/**
	 * Method to generate the filename
	 * 
	 * @param string $ext Optional
	 * @param string $custom Optional
	 * @param string $customLocation Optional
	 * @param boolean $flag Optional
	 * @param string $algo Optional
	 * @param integer $size Optional
	 * @param string $glue Optional
	 * @return string
	 */
	function generate( $ext = null , $custom = null , $customLocation = null , $flag = null , $algo = null , $size = null , $glue = null)
	{
		if(!is_null($ext))
			$this->setExtension($ext);
		
		if(!is_null($custom))
			$this->setCustom($custom,$customLocation);
		
		if(!is_null($flag))
			$this->setFlag($flag);
		
		if(!is_null($algo))
			$this->setHashAlgo($algo);
		
		if(!is_null($size))
			$this->setSize($size);
		
		if(!is_null($glue))
			$this->setGlue($glue);
		
		$this->_date = str_replace('/','',date("d/m/Y"));
		$this->_hour = str_replace(':','',date("H:i:s"));
		
		$hash = null;
		for($i=1;$i<=$this->_size;$i++)
		{
			$hash .= (string)rand(0,9);
		}
		if($this->_flag)
		{
			$hash = hash($this->_hashAlgo,$hash);
			$hash = substr($hash, 1, $this->_size);
		}
		
		$filename = $this->_date . $this->_glue . $this->_hour . $this->_glue . $hash;
		
		if($this->_custom)
		{
			switch($this->_customLocation)
			{
				case 'start' : 
					$filename = $this->_custom . $this->_glue .  $filename;
					break;
				case 'end' : 
					$filename = $filename . $this->_glue . $this->_custom;
					break;
				default :
					if(self::DEFAULT_CUSTOM_LOCATION == 'start')
						$filename = $this->_custom . $this->_glue .  $filename;
					else 
						$filename = $filename . $this->_glue . $this->_custom;
			}
		}
		
		$this->_filename = $filename . '.' . $this->_ext;
		
		return $this->getFileName();
	}
	/**
	 * Strategy pattern to allow direct access by controller
	 * 
	 * @param string $ext
	 * @param string $custom Optional
	 * @param string $customLocation Optional
	 * @param boolean $flag Optional
	 * @param string $algo Optional
	 * @param integer $size Optional
	 * @param string $glue Optional
	 * @return string
	 */
	function direct( $ext , $custom = null , $customLocation = null , $flag = null , $algo = null , $size = null , $glue = null)
	{
		return $this->generate($ext,$custom,$customLocation,$flag,$algo,$size,$glue);
	}
}