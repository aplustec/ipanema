<?php

/**
 * @see Zend_Controller_Action_Helper_Abstract
 */
require_once 'Zend/Controller/Action/Helper/Abstract.php';

/**
 * This is a Helper for encrypt strings
 * 
 * @category Helpers
 * @package App/Plugins
 * @subpackage Helpers
 * @author Lucas Mendes de Freitas (devsdmf)
 * @since 2012
 * @license http://www.devsdmf.net/license/general.txt
 * @copyright devSDMF Software Development (c)
 *
 */

class Helper_Encrypt extends Zend_Controller_Action_Helper_Abstract
{
	/**
	 * The default algo
	 * 
	 * @var string
	 */
	const DEFAULT_ALGO = 'whirlpool';
	/**
	 * The current algo for use in hash() function
	 * 
	 * @var string
	 */
	protected $_algo = self::DEFAULT_ALGO;
	/**
	 * The data to encrypt
	 * 
	 * @var string
	 */
	protected $_data = null;
	/**
	 * The hash generated by object
	 * 
	 * @var string
	 */
	protected $_hash = null;
	/**
	 * Method to set a custom algo
	 *  
	 * @param string $algo
	 */
	function setAlgo( $algo )
	{
		if(is_string($algo))
			$this->_algo = $algo;
	}
	/**
	 * Method to set the data to encrypt
	 * 
	 * @param string $data
	 */
	function setData( $data )
	{
		if(is_string($data))
			$this->_data = $data;
	}
	/**
	 * Method to get the current algo
	 * 
	 * @return string
	 */
	function getAlgo()
	{
		return $this->_algo;
	}
	/**
	 * Method to get the current data
	 * 
	 * @return string
	 */
	function getData()
	{
		return $this->_data;
	}
	/**
	 * Method to get the hash generated
	 * 
	 * @return string
	 */
	function getHash()
	{
		return $this->_hash;
	}
	/**
	 * Method to encrypt the string
	 * 
	 * @param string $data
	 * @param string $algo
	 * @return string
	 */
	function encrypt( $data = null , $algo = null )
	{
		if(!is_null($data))
			$this->setData($data);
		
		if(!is_null($algo))
			$this->setAlgo($algo);
		
		$this->_hash = hash($this->_algo, $this->_data);
		
		return $this->getHash();
	}
	/**
	 * Strategy pattern to allow direct access by controller
	 * 
	 * @param string $data
	 * @param string $algo
	 * @return string
	 */
	function direct( $data , $algo = null )
	{
		return $this->encrypt($data,$algo);
	}
}